@using Microsoft.AspNetCore.SignalR.Client
@using SignalR.Modules.Client;
@page "/chat"
@inherits OwningComponentBase<ChatHubClient>
@inject HttpClient Http

<div class="alert alert-info" role="alert">
	This sample uses the <i>ChatHub</i> module on the backend side, and the <i>ChatHubClient</i> on the client side.<br />
	The code is very similar to the <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr-blazor?view=aspnetcore-5.0&tabs=visual-studio&pivots=webassembly#add-razor-component-code-for-chat-2">sample code</a> in the docs.<br />
	The SignalR connection is shared with other SignalR modules and stays open when leaving this page.<br />
	It's possible to send messages via SignalR or via HTTP (using the <i>IModuleHubContext&lt;ChatHub&gt;</i> in the <i>ChatController</i>).
</div>

<div class="form-group">
	<label>
		User:
		<input @bind="userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Message:
		<input @bind="messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send (SignalR)</button>
<button @onclick="SendHttp" disabled="@(!IsConnected)">Send (Http)</button>

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
	 <li>@message</li>
	}
</ul>

@code {
	private List<string> messages = new List<string>();
	private string userInput = string.Empty;
	private string messageInput = string.Empty;

	private ChatHubClient ChatHub => Service;

	protected override async Task OnInitializedAsync()
	{
		ChatHub.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var encodedMsg = $"{user}: {message}";
			messages.Add(encodedMsg);
			StateHasChanged();
		});

		await ChatHub.EnsureConnectionStartedAsync();
	}

	async Task Send() =>
		await ChatHub.SendAsync("SendMessage", userInput, messageInput);

	async Task SendHttp() =>
		await Http.GetAsync($"/api/Chat?user={userInput}&message={messageInput}");

	public bool IsConnected =>
		ChatHub.State == HubConnectionState.Connected;
}
